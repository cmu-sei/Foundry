<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Foundry.Portal.Api</name>
    </assembly>
    <members>
        <member name="T:Foundry.Portal.Api.Controllers.ApplicationController">
            <summary>
            extensions controller
            </summary>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ApplicationController.#ctor(Foundry.Portal.Services.ApplicationService,Foundry.Portal.CoreOptions,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            create an instance of the application controller
            </summary>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ApplicationController.GetAll(Foundry.Portal.ViewModels.ApplicationDataFilter)">
            <summary>
            get all applications
            </summary>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ApplicationController.Update(Foundry.Portal.ViewModels.ApplicationUpdate)">
            <summary>
            update application
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ApplicationController.PushApplication(System.Int32[])">
            <summary>
            push application to all profiles
            </summary>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ApplicationController.SyncApplication">
            <summary>
            synchronize applications with identity server
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ApplicationController.GetAllForIdentity">
            <summary>
            get all applications
            </summary>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ApplicationController.AddToProfile(System.String)">
            <summary>
            bookmark application for identity
            </summary>
            <param name="slug"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ApplicationController.DeleteFromProfile(System.String)">
            <summary>
            remove bookmarked application from identity
            </summary>
            <param name="slug"></param>
            <returns></returns>
        </member>
        <member name="T:Foundry.Portal.Api.Controllers.ApiController">
            <summary>
            api base controller class
            </summary>
        </member>
        <member name="F:Foundry.Portal.Api.Controllers.ApiController.RESPONSE_CACHE_DURATION">
            <summary>
            default response cache duraction
            </summary>
        </member>
        <member name="F:Foundry.Portal.Api.Controllers.ApiController.RESPONSE_CACHE_LOCATION">
            <summary>
            default response cache location
            </summary>
        </member>
        <member name="P:Foundry.Portal.Api.Controllers.ApiController.CoreOptions">
            <summary>
            core configuration options
            </summary>
        </member>
        <member name="P:Foundry.Portal.Api.Controllers.ApiController.Logger">
            <summary>
            logger
            </summary>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ApiController.#ctor(Foundry.Portal.CoreOptions,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            constructor
            </summary>
            <param name="coreOptions"></param>
            <param name="logger"></param>
        </member>
        <member name="T:Foundry.Portal.Api.Controllers.CommentController">
            <summary>
            comment api endpoints
            </summary>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.CommentController.#ctor(Foundry.Portal.CoreOptions,Microsoft.Extensions.Logging.ILoggerFactory,Foundry.Portal.Services.DiscussionService)">
            <summary>
            creates an instance of the CommentController
            </summary>
            <param name="options"></param>
            <param name="mill"></param>
            <param name="discussionService"></param>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.CommentController.UpdateComment(System.Int32,Foundry.Portal.ViewModels.CommentUpdate)">
            <summary>
            update comment by id
            </summary>
            <param name="id"></param>
            <param name="comment"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.CommentController.UpVote(System.Int32)">
            <summary>
            up vote a comment by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.CommentController.DownVote(System.Int32)">
            <summary>
            down vote a comment by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.CommentController.Delete(System.Int32)">
            <summary>
             delete a comment by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Foundry.Portal.Api.Controllers.ContentController">
            <summary>
            content api endpoints
            </summary>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ContentController.#ctor(Foundry.Portal.CoreOptions,Microsoft.Extensions.Logging.ILoggerFactory,Foundry.Portal.Services.ContentService,Foundry.Portal.Services.DiscussionService,Foundry.Portal.Services.TagService)">
            <summary>
            creates an instance of the ContentController
            </summary>
            <param name="options"></param>
            <param name="mill"></param>
            <param name="contentService"></param>
            <param name="discussionService"></param>
            <param name="tagService"></param>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ContentController.GetAll(Foundry.Portal.ViewModels.ContentDataFilter)">
            <summary>
            get all content
            </summary>
            <param name="search"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ContentController.Get(System.Int32)">
            <summary>
            get content by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ContentController.GetByGlobalId(System.Guid)">
            <summary>
            get content by global id
            </summary>
            <param name="globalId"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ContentController.Update(System.Int32,Foundry.Portal.ViewModels.ContentUpdate)">
            <summary>
            update content
            </summary>
            <param name="id"></param>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ContentController.Disable(System.Int32[])">
            <summary>
            disable content
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ContentController.Enable(System.Int32[])">
            <summary>
            enable content
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ContentController.UpdateSponsor(System.String,System.Int32[])">
            <summary>
            update sponsor for content
            </summary>
            <param name="sponsorId"></param>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ContentController.UpdateAuthor(System.Int32,System.Int32[])">
            <summary>
            update author for content
            </summary>
            <param name="authorId"></param>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ContentController.Add(Foundry.Portal.ViewModels.ContentCreate)">
            <summary>
            add content
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ContentController.AddBookmark(System.Int32)">
            <summary>
            add bookmark for content
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ContentController.RemoveBookmark(System.Int32)">
            <summary>
            delete bookmark for content
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ContentController.AddRange(System.Int32,System.Collections.Generic.List{Foundry.Portal.ViewModels.ContentCreate})">
            <summary>
            add a collection of content to a channel
            </summary>
            <param name="id"></param>
            <param name="contentItems"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ContentController.Patch(System.Int32,Foundry.Portal.ViewModels.ContentPatch)">
            <summary>
            update specific fields
            </summary>
            <param name="id"></param>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ContentController.Launch(System.String,System.String)">
            <summary>
            launch content
            </summary>
            <param name="contentGlobalId"></param>
            <param name="profileGlobalId"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ContentController.UpdateTags(System.Int32,System.String[])">
            <summary>
            add an array of tag strings to content
            </summary>
            <param name="id"></param>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ContentController.Delete(System.Int32)">
            <summary>
            delete content by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ContentController.DeleteByGlobalId(System.Guid)">
            <summary>
            delete content by global id
            </summary>
            <param name="globalId"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ContentController.DeleteByGlobalIds(System.Collections.Generic.List{System.Guid})">
            <summary>
            delete content by global ids
            </summary>
            <param name="globalIds"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ContentController.SetRating(System.Int32,Foundry.Portal.Data.Rating)">
            <summary>
            rate content
            </summary>
            <param name="id"></param>
            <param name="rating"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ContentController.SetDifficulty(System.Int32,Foundry.Portal.Data.Difficulty)">
            <summary>
            rate contents difficulty
            </summary>
            <param name="id"></param>
            <param name="difficulty"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ContentController.Comments(System.Int32,Foundry.Portal.ViewModels.CommentDataFilter)">
            <summary>
            get all content comments by comment id
            </summary>
            <param name="id"></param>
            <param name="search"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ContentController.AddContentReviewComment(System.Int32,System.String)">
            <summary>
            add a review comment for content by content id
            </summary>
            <param name="id"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ContentController.AddFlag(System.Int32,System.String)">
            <summary>
            flag a content for review
            </summary>
            <param name="id"></param>
            <param name="comment"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ContentController.RemoveFlag(System.Int32)">
            <summary>
            flag a content for review
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ContentController.RejectFlag(System.Int32,System.Int32)">
            <summary>
            reject flag
            </summary>
            <param name="id"></param>
            <param name="profileId"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ContentController.AccepFlag(System.Int32,System.Int32)">
            <summary>
            accept flag
            </summary>
            <param name="id"></param>
            <param name="profileId"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ContentController.GetAllContentTypes">
            <summary>
            get content types
            </summary>
            <returns></returns>
        </member>
        <member name="T:Foundry.Portal.Api.Controllers.DashboardController">
            <summary>
            dashboard api endpoints
            </summary>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.DashboardController.#ctor(Foundry.Portal.CoreOptions,Stack.Data.Options.DatabaseOptions,Stack.Http.Options.AuthorizationOptions,Foundry.Portal.AnalyticsOptions,Foundry.Portal.RabbitMQOptions,Microsoft.Extensions.Logging.ILoggerFactory,Foundry.Portal.Services.ContentService,Foundry.Portal.Events.IDomainEventDelegator)">
            <summary>
            creates an instance of the DashboardController
            </summary>
            <param name="options"></param>
            <param name="databaseOptions"></param>
            <param name="authorizationOptions"></param>
            <param name="analyticsOptions"></param>
            <param name="rabbitMQOptions"></param>
            <param name="mill"></param>
            <param name="contentService"></param>
            <param name="domainEventDelegator"></param>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.DashboardController.GetDashboardTags">
            <summary>
            get dashboard tokens
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.DashboardController.GetDashboardValues">
            <summary>
            get dashboard values
            </summary>
            <returns></returns>
        </member>
        <member name="T:Foundry.Portal.Api.Controllers.DiscussionController">
            <summary>
            discussion api endpoints
            </summary>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.DiscussionController.#ctor(Foundry.Portal.CoreOptions,Microsoft.Extensions.Logging.ILoggerFactory,Foundry.Portal.Services.DiscussionService)">
            <summary>
            creates an instance of the DiscussionController
            </summary>
            <param name="options"></param>
            <param name="mill"></param>
            <param name="discussionService"></param>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.DiscussionController.GetAll(Foundry.Portal.ViewModels.DiscussionDataFilter)">
            <summary>
            get all discussions
            </summary>
            <param name="search"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.DiscussionController.Get(System.Int32)">
            <summary>
            get discussion by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.DiscussionController.Update(System.Int32,Foundry.Portal.ViewModels.DiscussionUpdate)">
            <summary>
            update discussion by id
            </summary>
            <param name="id"></param>
            <param name="discussion"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.DiscussionController.Add(Foundry.Portal.ViewModels.DiscussionCreate)">
            <summary>
            add discussion
            </summary>
            <param name="discussion"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.DiscussionController.Comments(System.Int32,Foundry.Portal.ViewModels.CommentDataFilter)">
            <summary>
            get discussion comments by id
            </summary>
            <param name="id"></param>
            <param name="search"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.DiscussionController.Comments(Foundry.Portal.ViewModels.DiscussionDataFilter)">
            <summary>
            get discussion by search filters
            [TODO] update angular client to use discussion.id
            </summary>
            <param name="search"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.DiscussionController.GetContentDiscussionByType(System.Int32,Foundry.Portal.Data.DiscussionType)">
            <summary>
            get discussion by content id and discussion type
            </summary>
            <param name="id"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.DiscussionController.AddComment(System.Int32,Foundry.Portal.ViewModels.CommentCreate)">
            <summary>
            add comment to discussion by id
            </summary>
            <param name="id">discussion id</param>
            <param name="comment"></param>
            <returns></returns>
        </member>
        <member name="T:Foundry.Portal.Api.Controllers.ExportController">
            <summary>
            export api endpoints
            </summary>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ExportController.#ctor(Foundry.Portal.CoreOptions,Microsoft.Extensions.Logging.ILoggerFactory,Foundry.Portal.Services.ContentService,Foundry.Portal.Services.PlaylistService)">
            <summary>
            creates an instance of the ExportController
            </summary>
            <param name="options"></param>
            <param name="mill"></param>
            <param name="contentService"></param>
            <param name="playlistService"></param>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ExportController.ExportContent(Foundry.Portal.ViewModels.ExportSettings)">
            <summary>
            export content
            </summary>
            <param name="export"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ExportController.ExportPlaylists(Foundry.Portal.ViewModels.ExportSettings)">
            <summary>
            export playlists
            </summary>
            <param name="export"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ExportController.Error">
            <summary>
            error
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.HomeController.#ctor(Foundry.Portal.CoreOptions,Stack.Http.Options.BrandingOptions,Stack.Data.Options.DatabaseOptions,Stack.Http.Options.AuthorizationOptions,Foundry.Portal.AnalyticsOptions,Foundry.Portal.RabbitMQOptions,Microsoft.Extensions.Logging.ILoggerFactory,Foundry.Portal.Services.ContentService,Stack.Http.Identity.IStackIdentityResolver,Foundry.Portal.Events.IDomainEventDelegator)">
            <summary>
            creates an instance of the home controller
            </summary>
            <param name="options"></param>
            <param name="brandingOptions"></param>
            <param name="databaseOptions"></param>
            <param name="authorizationOptions"></param>
            <param name="analyticsOptions"></param>
            <param name="rabbitMQOptions"></param>
            <param name="mill"></param>
            <param name="contentService"></param>
            <param name="identityResolver"></param>
            <param name="domainEventDelegator"></param>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.HomeController.Index">
            <summary>
            root
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.HomeController.Status">
            <summary>
            gets the status and module information for the api
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.HomeController.Configuration">
            <summary>
            get api configuration
            </summary>
            <returns></returns>
        </member>
        <member name="T:Foundry.Portal.Api.Controllers.ImportController">
            <summary>
            import api endpoints
            </summary>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ImportController.#ctor(Foundry.Portal.CoreOptions,Microsoft.Extensions.Logging.ILoggerFactory,Foundry.Portal.Services.ContentService,Foundry.Portal.Services.PlaylistService)">
            <summary>
            creates an instance of the ImportController
            </summary>
            <param name="options"></param>
            <param name="mill"></param>
            <param name="contentService"></param>
            <param name="playlistService"></param>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ImportController.ImportContent">
            <summary>
            import content
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ImportController.ImportPlaylists">
            <summary>
            import content
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ImportController.Error">
            <summary>
            error
            </summary>
            <returns></returns>
        </member>
        <member name="T:Foundry.Portal.Api.Controllers.PlaylistController">
            <summary>
            creates an instance of the PlaylistController
            </summary>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.PlaylistController.#ctor(Foundry.Portal.CoreOptions,Microsoft.Extensions.Logging.ILoggerFactory,Foundry.Portal.Services.PlaylistService,Foundry.Portal.Services.ContentService)">
            <summary>
            creates an instance of the PlaylistController
            </summary>
            <param name="options"></param>
            <param name="mill"></param>
            <param name="playlistService"></param>
            <param name="contentService"></param>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.PlaylistController.GetPlaylistsByProfileId(System.Int32,Foundry.Portal.ViewModels.PlaylistDataFilter)">
            <summary>
            get all playlists by profile id
            </summary>
            <param name="id"></param>
            <param name="search"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.PlaylistController.GetAll(Foundry.Portal.ViewModels.PlaylistDataFilter)">
            <summary>
            get all public playlists
            </summary>
            <param name="search"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.PlaylistController.FollowPlaylist(System.Int32)">
            <summary>
            follow a playlist
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.PlaylistController.UnfollowPlaylist(System.Int32)">
            <summary>
            unfollow a playlist
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.PlaylistController.GroupFollowPlaylist(System.Int32,System.String)">
            <summary>
            follow a playlist
            </summary>
            <param name="id"></param>
            <param name="groupId"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.PlaylistController.GroupUnfollowPlaylist(System.Int32,System.String)">
            <summary>
            unfollow a playlist
            </summary>
            <param name="id"></param>
            <param name="groupId"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.PlaylistController.GetContentsByPlaylistId(System.Int32,Foundry.Portal.ViewModels.ContentDataFilter)">
            <summary>
            get all content by playlist
            </summary>
            <param name="id"></param>
            <param name="search"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.PlaylistController.Playlists(Foundry.Portal.ViewModels.PlaylistDataFilter)">
            <summary>
            get playlist for current user
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.PlaylistController.Add(Foundry.Portal.ViewModels.PlaylistCreate)">
            <summary>
            add playlist to profile
            </summary>
            <param name="playlist"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.PlaylistController.Get(System.Int32)">
            <summary>
            get playlist
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.PlaylistController.GetGroupPlaylists(System.String,Foundry.Portal.ViewModels.PlaylistDataFilter)">
            <summary>
            get all playlists by group id
            </summary>
            <param name="id"></param>
            <param name="search"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.PlaylistController.Update(System.Int32,Foundry.Portal.ViewModels.PlaylistUpdate)">
            <summary>
            update playlist
            </summary>
            <param name="id"></param>
            <param name="playlist"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.PlaylistController.Delete(System.Int32)">
            <summary>
            delete playlist
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.PlaylistController.SetAsDefault(System.Int32)">
            <summary>
            set playlist as default playlist
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.PlaylistController.AddContentToPlaylist(System.Int32,System.Int32)">
            <summary>
            add content to playlist by id
            </summary>
            <param name="id"></param>
            <param name="contentId"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.PlaylistController.RemoveContentFromPlaylist(System.Int32,System.Int32)">
            <summary>
            remove content from playlist by id
            </summary>
            <param name="id"></param>
            <param name="contentId"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.PlaylistController.AddToDefaultPlaylist(System.Int32)">
            <summary>
            add content to playlist
            </summary>
            <param name="contentId"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.PlaylistController.Organize(System.Int32,System.Collections.Generic.List{Foundry.Portal.ViewModels.PlaylistSectionUpdate})">
            <summary>
            organize playlist content by the order of the sections passed in
            </summary>
            <param name="id"></param>
            <param name="sections"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.PlaylistController.GetAllByRating(Foundry.Portal.ViewModels.PlaylistDataFilter)">
            <summary>
            get all playlists by rating
            </summary>
            <param name="search"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.PlaylistController.SetRating(System.Int32,Foundry.Portal.Data.Rating)">
            <summary>
            rate playlist
            </summary>
            <param name="id"></param>
            <param name="rating"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.PlaylistController.Error">
            <summary>
            error
            </summary>
            <returns></returns>
        </member>
        <member name="T:Foundry.Portal.Api.Controllers.PostController">
            <summary>
            post api
            </summary>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.PostController.#ctor(Foundry.Portal.CoreOptions,Microsoft.Extensions.Logging.ILoggerFactory,Foundry.Portal.Services.PostService)">
            <summary>
            creates an instance of the PostController
            </summary>
            <param name="options"></param>
            <param name="mill"></param>
            <param name="postService"></param>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.PostController.Add(Foundry.Portal.ViewModels.PostCreate)">
            <summary>
            add post
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.PostController.Update(System.Int32,Foundry.Portal.ViewModels.PostUpdate)">
            <summary>
            update post
            </summary>
            <param name="id"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.PostController.Delete(System.Int32)">
            <summary>
            delete post
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.PostController.UpVote(System.Int32)">
            <summary>
            up vote post
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.PostController.DownVote(System.Int32)">
            <summary>
            down vote post
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.PostController.GetById(System.Int32)">
            <summary>
            get post by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.PostController.GetAll(Foundry.Portal.ViewModels.PostDataFilter)">
            <summary>
            get all posts
            </summary>
            <param name="search"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.PostController.GetAllReplies(System.Int32,Foundry.Portal.ViewModels.PostDataFilter)">
            <summary>
            get all post replies by parent post id
            </summary>
            <param name="id"></param>
            <param name="search"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.PostController.GetAllByProfileId(System.Int32,Foundry.Portal.ViewModels.PostDataFilter)">
            <summary>
            get all posts by profile id
            </summary>
            <param name="id"></param>
            <param name="search"></param>
            <returns></returns>
        </member>
        <member name="T:Foundry.Portal.Api.Controllers.ProfileController">
            <summary>
            profile api endpoints
            </summary>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ProfileController.#ctor(Foundry.Portal.CoreOptions,Microsoft.Extensions.Logging.ILoggerFactory,Foundry.Portal.Services.ProfileService,Foundry.Portal.Services.PlaylistService,Foundry.Portal.Services.ContentService)">
            <summary>
            api profile endpoints
            </summary>
            <param name="options"></param>
            <param name="mill"></param>
            <param name="profileService"></param>
            <param name="playlistService"></param>
            <param name="contentService"></param>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ProfileController.GetAll(Foundry.Portal.ViewModels.ProfileDataFilter)">
            <summary>
            search all profiles
            </summary>
            <param name="search"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ProfileController.GetAllByRating(Foundry.Portal.ViewModels.ProfileDataFilter)">
            <summary>
            get all authors by rating
            </summary>
            <param name="search"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ProfileController.GetById(System.Int32)">
            <summary>
            get profile by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ProfileController.GetByGlobalId(System.Guid)">
            <summary>
            get profile by global id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ProfileController.Add(Foundry.Portal.ViewModels.ProfileCreate)">
            <summary>
            add profile
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ProfileController.Update(System.Int32,Foundry.Portal.ViewModels.ProfileUpdate)">
            <summary>
            update profile
            </summary>
            <param name="id"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ProfileController.SetKeyValue(System.Int32,System.String,System.String)">
            <summary>
            add or update profile key value
            </summary>
            <param name="id">profile id</param>
            <param name="key">profile key</param>
            <param name="value">profile value</param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ProfileController.Content(System.Int32,Foundry.Portal.ViewModels.ContentDataFilter)">
            <summary>
            get all content for profile by id
            </summary>
            <param name="id"></param>
            <param name="search"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ProfileController.Enabled(System.Int32)">
            <summary>
            enable profile
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ProfileController.Disabled(System.Int32)">
            <summary>
            disable profile
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ProfileController.ToggleAdministrator(System.Int32)">
            <summary>
            toggle administrator
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ProfileController.TogglePowerUser(System.Int32)">
            <summary>
            toggle power user
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Foundry.Portal.Api.Controllers.ReportController">
            <summary>
            report controller
            </summary>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ReportController.#ctor(Foundry.Portal.Services.ReportService,Foundry.Portal.CoreOptions,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            creates an instance of the report controller
            </summary>
            <param name="reportService"></param>
            <param name="options"></param>
            <param name="mill"></param>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ReportController.Report(System.String,Foundry.Portal.ViewModels.ReportDataFilter)">
            <summary>
            generate report
            </summary>
            <param name="name">name of the report</param>
            <param name="search">data filter</param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ReportController.Reports">
            <summary>
            get all reports
            </summary>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.ReportController.Export(System.String,System.String,Foundry.Portal.ViewModels.ReportDataFilter)">
            <summary>
            export report as the request type
            </summary>
            <param name="name">name of the report</param>
            <param name="type">export file type</param>
            <param name="search">data filter</param>
            <returns></returns>
        </member>
        <member name="T:Foundry.Portal.Api.Controllers.SearchController">
            <summary>
            search controller
            </summary>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.SearchController.#ctor(Foundry.Portal.CoreOptions,Microsoft.Extensions.Logging.ILoggerFactory,Foundry.Portal.Services.ContentService,Foundry.Portal.Services.PlaylistService)">
            <summary>
            creates and instance of the search controller
            </summary>
            <param name="options"></param>
            <param name="mill"></param>
            <param name="contentService"></param>
            <param name="playlistService"></param>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.SearchController.Search(Foundry.Portal.ViewModels.SearchDataFilter)">
            <summary>
            global search
            </summary>
            <param name="search"></param>
            <returns></returns>
        </member>
        <member name="T:Foundry.Portal.Api.Controllers.SettingController">
            <summary>
            setting controller
            </summary>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.SettingController.#ctor(Foundry.Portal.Services.SettingService,Foundry.Portal.CoreOptions,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            creates an instance of the setting controller
            </summary>
            <param name="settingService"></param>
            <param name="options"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.SettingController.GetAll(Foundry.Portal.ViewModels.SettingDataFilter)">
            <summary>
            get all settings
            </summary>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.SettingController.Get(System.String)">
            <summary>
            get setting by key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.SettingController.Update(System.String,Foundry.Portal.ViewModels.SettingUpdate)">
            <summary>
            update setting
            </summary>
            <param name="key"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.SettingController.Add(Foundry.Portal.ViewModels.SettingCreate)">
            <summary>
            add setting
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Foundry.Portal.Api.Controllers.SystemNotificationController">
            <summary>
            setting controller
            </summary>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.SystemNotificationController.#ctor(Foundry.Portal.Data.SketchDbContext,Stack.Http.Identity.IStackIdentityResolver,Foundry.Portal.Notifications.INotificationHandler,Foundry.Portal.CoreOptions,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            create an instance of system notification controller
            </summary>
            <param name="db"></param>
            <param name="identityResolver"></param>
            <param name="notificationHandler"></param>
            <param name="options"></param>
            <param name="mill"></param>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.SystemNotificationController.Add(Foundry.Portal.ViewModels.SystemNotificationCreate)">
            <summary>
            add system notification
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Foundry.Portal.Api.Controllers.TagController">
            <summary>
            tag api endpoints
            </summary>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.TagController.#ctor(Foundry.Portal.CoreOptions,Microsoft.Extensions.Logging.ILoggerFactory,Foundry.Portal.Services.TagService)">
            <summary>
            creates an instance of the TagController
            </summary>
            <param name="options"></param>
            <param name="mill"></param>
            <param name="tagService"></param>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.TagController.GetAll(Foundry.Portal.ViewModels.TagDataFilter)">
            <summary>
            get all tags
            </summary>
            <param name="search"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.TagController.Add(System.String[])">
            <summary>
            add tag
            </summary>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.TagController.Add(System.String,System.String[])">
            <summary>
            add tags with type
            </summary>
            <param name="type"></param>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.TagController.Update(System.Int32,Foundry.Portal.ViewModels.TagUpdate)">
            <summary>
            update existing tag
            </summary>
            <param name="id"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.TagController.Delete(System.String)">
            <summary>
            delete a tag by name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Controllers.TagController.DeleteRange(System.Int32[])">
            <summary>
            deletes tags by array of ids
            </summary>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="T:Foundry.Portal.Api.ApplicationBuilderExtentions">
            <summary>
            extensions to the IApplicationBuilder class
            </summary>
        </member>
        <member name="P:Foundry.Portal.Api.ApplicationBuilderExtentions.MessageConsumer">
            <summary>
            the message consumer
            </summary>
        </member>
        <member name="M:Foundry.Portal.Api.ApplicationBuilderExtentions.UseMessageConsumer(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            binds Start() and Stop() events for the MessageConsumer
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.IWebHostExtensions.Seed(Microsoft.AspNetCore.Hosting.IWebHost)">
            <summary>
            seed database using json files
            </summary>
            <param name="webHost"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.SeedDataFactory.Seed``1(System.String,System.Func{``0,``0})">
            <summary>
            seeds the database with a collection of the specified type
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="fileName"></param>
            <param name="lookup"></param>
            <returns></returns>
        </member>
        <member name="M:Foundry.Portal.Api.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            constructor for Startup
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:Foundry.Portal.Api.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            the supported services
            </summary>
            <param name="services"></param>
        </member>
    </members>
</doc>
